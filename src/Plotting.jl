using PyPlot
import PyCall
export plot, savefig, conformal_grid


const mygreen = [151/255,180/255,118/255];
const mygreen2 = [113/255,161/255,103/255];
const myblue = [74/255,144/255,226/255];

PlotColor = Union{Vector{Float64},String,Symbol}

struct PlotStyle

  bodycolor :: PlotColor
  xicolor   :: PlotColor
  etacolor  :: PlotColor
  markercolor :: PlotColor
  linewidth :: Int64
  pointsize :: Int64

end

function PlotStyle()
  PyCall.PyDict(matplotlib["rcParams"])["font.family"] = "STIXGeneral";
  PyCall.PyDict(matplotlib["rcParams"])["mathtext.fontset"] = "stix";
  PyCall.PyDict(matplotlib["rcParams"])["font.size"] = 10;

  bodycolor = mygreen
  xicolor = mygreen2
  etacolor = myblue
  markercolor = "r"
  linewidth = 1
  pointsize = 3

  PlotStyle(bodycolor,xicolor,etacolor,markercolor,linewidth,pointsize)

end

"""
    plot(p::Polygon)

Plots the polygon `p`.

# Example

```jldoctest
julia> p = Polygon([-1.0,0.2,1.0,-1.0],[-1.0,-1.0,0.5,1.0]);

julia> plot(p);
```
"""
function plot(p::Polygon)
  ps = PlotStyle()
  pf = PyPlot.fill(real(p.vert),imag(p.vert),facecolor=ps.bodycolor);
  PyPlot.plot(real(p.vert),imag(p.vert),color=ps.bodycolor);
  PyPlot.axis("scaled")
  nothing
end

"""
    conformal_grid(map::ExteriorMap)

Plots the grid lines generated by the exterior mapping `map`.

# Example

```jldoctest paramtest
julia> p = Polygon([-1.0,0.2,1.0,-1.0],[-1.0,-1.0,0.5,1.0]);

julia> map = ExteriorMap(p);

julia> conformal_grid(map);
```
"""
function conformal_grid(map::SchwarzChristoffel.ExteriorMap)

  ps = PlotStyle()

  xmaxc = 4.0
  rmax = sqrt(2)*xmaxc

  PyPlot.subplot(121)
  PyPlot.axis("scaled")
  PyPlot.axis([-xmaxc,xmaxc,-xmaxc,xmaxc])
  PyPlot.xticks(ceil(-xmaxc/2)*2:2:floor(xmaxc/2)*2)
  PyPlot.yticks(ceil(-xmaxc/2)*2:2:floor(xmaxc/2)*2)

  PyPlot.subplot(122)
  PyPlot.axis("scaled")
  xmaxp = xmaxc*abs(map.constant)
  dxp = round(xmaxp)*0.5
  PyPlot.axis([-xmaxp,xmaxp,-xmaxp,xmaxp])
  PyPlot.xticks(ceil(-xmaxp/dxp)*dxp:dxp:floor(xmaxp/dxp)*dxp)
  PyPlot.yticks(ceil(-xmaxp/dxp)*dxp:dxp:floor(xmaxp/dxp)*dxp)

  nθ = 20
  dθ = 2π/nθ
  θg = 0
  nrg = 100
  rg = linspace(1,rmax,nrg)
  for jθ in 1:nθ
      ζg = collect(rg*exp(im*θg))
      zg = SchwarzChristoffel.evaluate(ζg,map)

       PyPlot.subplot(121)
       PyPlot.plot(real(ζg),imag(ζg),linewidth=ps.linewidth,color=ps.xicolor)

       PyPlot.subplot(122)
       PyPlot.plot(real(zg),imag(zg),linewidth=ps.linewidth,color=ps.xicolor)

       θg += dθ
   end

   nr = 10
   dr = (rmax-1)/nr
   rg = 1

   nθg = 200
   θg = linspace(0,2π,nθg)
   #if strcmpi(maptype,'sc')
  #     thg = [thg shape.prevangle'];  % Include prevertices
  #     thsort = sort(thg - floor(thg/(2*pi))*2*pi);  % Normalize the range
    #   thg = thsort(abs(diff(thsort))>1e-15);  % Eliminate duplicates
  #     thg = [thg 2*pi];
   #end
   for jr in 1:nr
       ζg = collect(rg*exp.(im*θg));
       zg = SchwarzChristoffel.evaluate(ζg,map)

       PyPlot.subplot(121)
       PyPlot.plot(real(ζg),imag(ζg),linewidth=ps.linewidth,color=ps.etacolor)

       PyPlot.subplot(122)
       PyPlot.plot(real(zg),imag(zg),linewidth=ps.linewidth,color=ps.etacolor)

       rg += dr
   end

end
